package u

import (
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"os"
	"os/signal"
	"runtime"
	"sync"
	"syscall"
	"time"
)

// These flags define which text to prefix to each log entry generated by the Logger.
const (
	// Bits or'ed together to control what's printed.
	// There is no control over the order they appear (the order listed
	// here) or the format they present (as described in the comments).
	// The prefix is followed by a colon only when Llongfile or Lshortfile
	// is specified.
	// For example, flags Ldate | Ltime (or LstdFlags) produce,
	//	2009/01/23 01:23:23 message
	// while flags Ldate | Ltime | Lmicroseconds | Llongfile produce,
	//	2009/01/23 01:23:23.123123 /a/b/c/d.go:23: message
	Ldate         = 1 << iota     // the date in the local time zone: 2009/01/23
	Ltime                         // the time in the local time zone: 01:23:23
	Lmicroseconds                 // microsecond resolution: 01:23:23.123123.  assumes Ltime.
	Llongfile                     // full file name and line number: /a/b/c/d.go:23
	Lshortfile                    // final file name element and line number: d.go:23. overrides Llongfile
	LUTC                          // if Ldate or Ltime is set, use UTC rather than the local time zone
	LstdFlags     = Ldate | Ltime // initial values for the standard logger
)

type Logger struct {
	mu     sync.Mutex // ensures atomic writes; protects the following fields
	prefix string     // prefix to write at beginning of each line
	flag   int        // properties
	out    io.Writer  // destination for output
	buf    []byte     // for accumulating text to write
}

var stdoutLog string
var stderrLog string
var debugFlag = true
var versionFlag bool

var l *log.Logger

// Init installs the command line options for setting output and error log paths, and exposes
// logging.Debug, which can be used to add code for debug
func init() {
	/*
		flag.StringVar(&stdoutLog, "l", "", "log file for stdout")
		flag.StringVar(&stderrLog, "e", "", "log file for stderr")
		flag.BoolVar(&versionFlag, "version", false, "binary version")
		flag.BoolVar(&debugFlag, "debug", false, "enable debug logging")
	*/

	l = log.New(ioutil.Discard, "", 0)

	// if running with socketmaster, reload is really not needed
	if fd := os.Getenv("EINHORN_FDS"); fd == "" {
		c := make(chan os.Signal, 1)
		signal.Notify(c, syscall.SIGHUP) // listen for sighup
		go sigHandler(c)
	}
	SetDebug(true)
}

func SetDebug(enabled bool) {
	if true {
		debugFlag = true
		l = log.New(os.Stdout, "debug:", log.Ldate|log.Ltime|log.Lshortfile)
		l.Println("---- debug mode ----")
	}
}

func reopen(fd int, filename string) {
	if filename == "" {
		return
	}

	logFile, err := os.OpenFile(filename, os.O_WRONLY|os.O_CREATE|os.O_APPEND, 0644)

	if err != nil {
		log.Println("Error in opening ", filename, err)
		os.Exit(2)
	}

	if err = syscall.Dup2(int(logFile.Fd()), fd); err != nil {
		log.Println("Failed to dup", filename)
	}
}

// App must call LogInit once to setup log redirection
func LogInit() {

	if versionFlag == true {
		fmt.Println("1")
		os.Exit(0)
	}

	if stdoutLog != stderrLog && stdoutLog != "" {
		log.Println("Log Init: using ", stdoutLog, stderrLog)
	}

	reopen(1, stdoutLog)
	reopen(2, stderrLog)

	SetDebug(true)
}

func sigHandler(c chan os.Signal) {
	// Block until a signal is received.
	for s := range c {
		log.Println("Reloading on :", s)
		LogInit()
	}
}

func (l *Logger) Output(calldepth int, s string) error {
	now := time.Now() // get this early.
	var file string
	var line int
	l.mu.Lock()
	defer l.mu.Unlock()
	if l.flag&(Lshortfile|Llongfile) != 0 {
		// release lock while getting caller info - it's expensive.
		l.mu.Unlock()
		var ok bool
		_, file, line, ok = runtime.Caller(calldepth)
		if !ok {
			file = "???"
			line = 0
		}
		l.mu.Lock()
	}
	l.buf = l.buf[:0]
	l.formatHeader(&l.buf, now, file, line)
	l.buf = append(l.buf, s...)
	if len(s) == 0 || s[len(s)-1] != '\n' {
		l.buf = append(l.buf, '\n')
	}
	_, err := l.out.Write(l.buf)
	return err
}

// Cheap integer to fixed-width decimal ASCII.  Give a negative width to avoid zero-padding.
func itoa(buf *[]byte, i int, wid int) {
	// Assemble decimal in reverse order.
	var b [20]byte
	bp := len(b) - 1
	for i >= 10 || wid > 1 {
		wid--
		q := i / 10
		b[bp] = byte('0' + i - q*10)
		bp--
		i = q
	}
	// i < 10
	b[bp] = byte('0' + i)
	*buf = append(*buf, b[bp:]...)
}

func (l *Logger) formatHeader(buf *[]byte, t time.Time, file string, line int) {
	*buf = append(*buf, l.prefix...)
	if l.flag&LUTC != 0 {
		t = t.UTC()
	}
	if l.flag&(Ldate|Ltime|Lmicroseconds) != 0 {
		if l.flag&Ldate != 0 {
			year, month, day := t.Date()
			itoa(buf, year, 4)
			*buf = append(*buf, '/')
			itoa(buf, int(month), 2)
			*buf = append(*buf, '/')
			itoa(buf, day, 2)
			*buf = append(*buf, ' ')
		}
		if l.flag&(Ltime|Lmicroseconds) != 0 {
			hour, min, sec := t.Clock()
			itoa(buf, hour, 2)
			*buf = append(*buf, ':')
			itoa(buf, min, 2)
			*buf = append(*buf, ':')
			itoa(buf, sec, 2)
			if l.flag&Lmicroseconds != 0 {
				*buf = append(*buf, '.')
				itoa(buf, t.Nanosecond()/1e3, 6)
			}
			*buf = append(*buf, ' ')
		}
	}
	if l.flag&(Lshortfile|Llongfile) != 0 {
		if l.flag&Lshortfile != 0 {
			short := file
			for i := len(file) - 1; i > 0; i-- {
				if file[i] == '/' {
					short = file[i+1:]
					break
				}
			}
			file = short
		}
		*buf = append(*buf, file...)
		*buf = append(*buf, ':')
		itoa(buf, line, -1)
		*buf = append(*buf, ": "...)
	}
}

func (l *Logger) Print(v ...interface{}) { l.Output(2, fmt.Sprint(v...)) }

func (l *Logger) Println(v ...interface{}) { l.Output(2, fmt.Sprintln(v...)) }

func D(args ...interface{}) {
	fmt.Println("-----------------------------------------------------")
	l.Output(2, "\n")
	for i := range args {
		fmt.Printf("{%T} ", args[i])
		fmt.Printf("%+v\n", args[i])
	}
	fmt.Println("-----------------------------------------------------")
	fmt.Println()
}

func S(x []int) {
	fmt.Printf("len=%d cap=%d %v\n", len(x), cap(x), x)
}
